# Shared definitions

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID!
  endCursor: ID!
}

# Edges and connections

type FormInstanceConnection {
  edges: [FormInstanceEdge]
  pageInfo: PageInfo!
}

type FormInstanceEdge {
  cursor: ID!
  node: FormInstance
}

type FormInstanceQustionConnection {
  edges: [FormInstanceQuestionEdge]
  pageInfo: PageInfo!
}

type FormInstanceQuestionEdge {
  cusor: ID!
  node: FormInstanceQuestion
}

type FormTemplateQuestionConnection {
  edges: [FormTemplateQuestionEdge]
  pageInfo: PageInfo!
}

type FormTemplateQuestionEdge {
  cusor: ID!
  node: FormTemplateQuestion
}

# Limber types

type FormInstance implements Node {
  id: ID!
  createdDate: String!
  formTemplate: FormTemplate!
  number: Int
  submittedDate: String
  creator: User
  # This should be a connection, for simplicity, we will use an array for our temp graphql server
  questions: [FormInstanceQuestion]!
}

interface FormInstanceQuestion implements Node {
  id: ID!
  createdDate: String!
  question: FormTemplateQuestion
}

type FormInstanceDateQuestion implements Node & FormInstanceQuestion {
  id: ID!
  createdDate: String!
  question: FormTemplateQuestion
  date: String!
}

type FormInstanceRadioSelectorQuestion implements Node & FormInstanceQuestion {
  id: ID!
  createdDate: String!
  question: FormTemplateQuestion
  selection: String
}

type FormInstanceTextQuestion implements Node & FormInstanceQuestion {
  id: ID!
  createdDate: String!
  question: FormTemplateQuestion
  text: String
}

type FormInstanceYesNoQuestion implements Node & FormInstanceQuestion {
  id: ID!
  createdDate: String!
  question: FormTemplateQuestion
  yes: Boolean
}

type FormTemplate implements Node {
  id: ID!
  createdDate: String!
  title: String!
  description: String
  formInstances: FormInstanceConnection!
  # This should be a connection, for simplicity, we will use an array for our temp graphql server
  question: [FormTemplateQuestion]!
}

interface FormTemplateQuestion implements Node {
  id: ID!
  createdDate: String!,
  label: String!
  helpText: String
  required: Boolean!
}

type FormTemplateDateQuestion implements Node & FormTemplateQuestion  {
  id: ID!
  createdDate: String!,
  label: String!
  helpText: String
  required: Boolean!
  earliest: String
  latest: String
}

type FormTemplateRadioSelectorQuestion implements Node & FormTemplateQuestion  {
  id: ID!
  createdDate: String!,
  label: String!
  helpText: String
  required: Boolean!
  options: [String]!
}

type FormTemplateTextQuestion implements Node & FormTemplateQuestion  {
  id: ID!
  createdDate: String!,
  label: String!
  helpText: String
  required: Boolean!
  multiline: Boolean!
  placeholder: String
}

type FormTemplateYesNoQuestion implements Node & FormTemplateQuestion  {
  id: ID!
  createdDate: String!,
  label: String!
  helpText: String
  required: Boolean!
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  fullName: String
  emailAddress: String!
  profilePhotoUrl: String
}

# Queries

type Query {
  node(
    id: ID!
  ): Node
}
